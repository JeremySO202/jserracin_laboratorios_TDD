module alu_cmp_tb;

    parameter W = 4;
    
    // Registros de entrada y operación
    logic [W-1:0] A, B;
    logic [3:0] op;
    
    // Registros para almacenar el resultado y las banderas
    logic [W-1:0] op_result;
    logic N, Z, C, V;
    
    // Registros para registrar las señales de entrada y operación
    logic [W-1:0] reg_A, reg_B;
    logic [3:0] reg_op;
    
    // Registros para almacenar resultados y banderas
    logic [W-1:0] reg_result;
    logic reg_N, reg_Z, reg_C, reg_V;

    // Instanciación de la ALU
    alu #(.W(W)) a_alu (
        .A(A),
        .B(B),
        .op(op),
        .op_result(op_result),
        .N(N),
        .Z(Z),
        .C(C),
        .V(V)
    );

    // Proceso de prueba
    initial begin
        $display("Inicio de la prueba de la ALU");

        // Suma
        A = 4'b0101; B = 4'b0011; op = 4'b0000; #10;
        
        // Registrar entradas
        reg_A = A;
        reg_B = B;
        reg_op = op;
        
        // Verificar resultado
        if (op_result !== 4'b1000) $error("Error en suma: %b + %b = %b, esperado: 1000", A, B, op_result);
        else $display("Correcto: %b + %b = %b", A, B, op_result);

        // Registrar resultado y banderas
        reg_result = op_result;
        reg_N = N;
        reg_Z = Z;
        reg_C = C;
        reg_V = V;
        
        // Mostrar estado de banderas
        $display("Resultado: %b, N = %b, Z = %b, C = %b, V = %b", reg_result, reg_N, reg_Z, reg_C, reg_V);
        
        // Verificar banderas
        if (Z !== 0) $error("Error en zero, esperada 0");
        else $display("Z = %b", Z);
        if (C !== 0) $error("Error en carry, esperada 0");
        else $display("C = %b", C);
        if (V !== 0) $error("Error en overflow, esperada 0");
        else $display("V = %b", V);
        if (N !== 0) $error("Error en neg_flag, esperada 0");
        else $display("N = %b", N);
        
        // Siguiente prueba
        A = 4'b1111; B = 4'b0001; op = 4'b0000; #10;
        
        // Registrar entradas
        reg_A = A;
        reg_B = B;
        reg_op = op;

        // Verificar resultado
        if (op_result !== 4'b0000) $error("Error en suma: %b + %b = %b, esperado: 0000", A, B, op_result);
        else $display("Correcto: %b + %b = %b", A, B, op_result);

        // Registrar resultado y banderas
        reg_result = op_result;
        reg_N = N;
        reg_Z = Z;
        reg_C = C;
        reg_V = V;
        
        // Mostrar estado de banderas
        $display("Resultado: %b, N = %b, Z = %b, C = %b, V = %b", reg_result, reg_N, reg_Z, reg_C, reg_V);

        // Verificar banderas
        if (Z !== 1) $error("Error en zero, esperada 1");
        else $display("Z = %b", Z);
        if (C !== 1) $error("Error en carry, esperada 1");
        else $display("C = %b", C);
        if (V !== 0) $error("Error en overflow, esperada 0");
        else $display("V = %b", V);
        if (N !== 0) $error("Error en neg_flag, esperada 0");
        else $display("N = %b", N);

        // Resto, multiplicación, y demás operaciones...
        // Puedes continuar con las pruebas de la misma manera.
    end
endmodule
